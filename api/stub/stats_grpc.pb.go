// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: stats.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SSDClient is the client API for SSD service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SSDClient interface {
	Subsribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (SSD_SubsribeClient, error)
}

type sSDClient struct {
	cc grpc.ClientConnInterface
}

func NewSSDClient(cc grpc.ClientConnInterface) SSDClient {
	return &sSDClient{cc}
}

func (c *sSDClient) Subsribe(ctx context.Context, in *Request, opts ...grpc.CallOption) (SSD_SubsribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &SSD_ServiceDesc.Streams[0], "/api.SSD/Subsribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &sSDSubsribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SSD_SubsribeClient interface {
	Recv() (*Responce, error)
	grpc.ClientStream
}

type sSDSubsribeClient struct {
	grpc.ClientStream
}

func (x *sSDSubsribeClient) Recv() (*Responce, error) {
	m := new(Responce)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SSDServer is the server API for SSD service.
// All implementations must embed UnimplementedSSDServer
// for forward compatibility
type SSDServer interface {
	Subsribe(*Request, SSD_SubsribeServer) error
	mustEmbedUnimplementedSSDServer()
}

// UnimplementedSSDServer must be embedded to have forward compatible implementations.
type UnimplementedSSDServer struct {
}

func (UnimplementedSSDServer) Subsribe(*Request, SSD_SubsribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subsribe not implemented")
}
func (UnimplementedSSDServer) mustEmbedUnimplementedSSDServer() {}

// UnsafeSSDServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SSDServer will
// result in compilation errors.
type UnsafeSSDServer interface {
	mustEmbedUnimplementedSSDServer()
}

func RegisterSSDServer(s grpc.ServiceRegistrar, srv SSDServer) {
	s.RegisterService(&SSD_ServiceDesc, srv)
}

func _SSD_Subsribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SSDServer).Subsribe(m, &sSDSubsribeServer{stream})
}

type SSD_SubsribeServer interface {
	Send(*Responce) error
	grpc.ServerStream
}

type sSDSubsribeServer struct {
	grpc.ServerStream
}

func (x *sSDSubsribeServer) Send(m *Responce) error {
	return x.ServerStream.SendMsg(m)
}

// SSD_ServiceDesc is the grpc.ServiceDesc for SSD service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SSD_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.SSD",
	HandlerType: (*SSDServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subsribe",
			Handler:       _SSD_Subsribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stats.proto",
}
